# Week 1 Notes

## "Week 2 Diagramming" video
He went over the websites we will have in the diagram and mapped it out

## "Setting Up Terratowns" video

### Create an issue

1. In Github repo for project, create an issue named
> Terratowns Mock Server
With a description of
> - [ ] Download Terratowns Mock Server into our repo.
https://github.com/ExamProCo/terratowns_mock_server

2. Tag the issue with enchacement
3. Create a branch off of the issue. Open it in GitPod.

### Clone ExamPro's Mock Server Repo to the Project Repo

1. Go to the repo for the Mock Server
> https://github.com/ExamProCo/terratowns_mock_server

2. Click code drop down and choose HTTPS, copy the line.

3. In Gitpod terminal run this

`git clone https://github.com/ExamProCo/terratowns_mock_server.git`

4. Now it is in our repo. We need to get rid of the .git directory

`cd terratowns_mock_server/`

`ls -al`

`rm -rf .git`

`ls -la`

The .git directory should be gone.

5. In .gitpod.yml in terratowns_mock_server directory cut out the contents and add it in our main .gitpod.yml file. 
Add the code after the block for terraform task.
Add in the first init command to cd into the correct directory. 
Change init to before.
Add cd $PROJECT_ROOT for the first line of commands in every task.
```yaml
tasks:
  - name: terraform
    before: |
      cd $PROJECT_ROOT
      source ./bin/set_tf_alias
      source ./bin/install_terraform_cli
      source ./bin/generate_tfrc_credentials
      cp $PROJECT_ROOT/terraform.tfvars.example $PROJECT_ROOT/terraform.tfvars
  - name: sinatra
    before: | 
      cd $PROJECT_ROOT
      bundle install
      bundle exec ruby server.rb 
  - name: aws-cli
    env:
      AWS_CLI_AUTO_PROMPT: on-partial
    before: |
      cd $PROJECT_ROOT
      source ./bin/set_tf_alias
      source ./bin/install_aws_cli
  - name: http-server
    before: |
      cd $PROJECT_ROOT
      npm install --global http-server
    command:
      http-server
vscode:
  extensions:
    - amazonwebservices.aws-toolkit-vscode
    - hashicorp.terraform
    - mhutchie.git-graph
    - phil294.git-log--graph

```

6. Delete the .gitpod.yml file in the terratowns_mock_server directory.

7. Rename the bin folder in terratowns_mock_server to terratowns
Drag the folder into bin.

8. In terminal use this to make sure we have permissions set for it to run

`cd ..`

`chmod u+x terratowns_mock_server/*`

9. Commit our changes to make sure when we open it again, our Ruby server is running
> #42 Copy terratowns mock server into our repo. Move bin directories into Main bin directories

10. Stop the GitPod Workspace

### Reopen GitPod 

1. In GitHub, launch a Gitpod for the branch.

2. In Gitpod, open the sinatra tab and make sure there are no errors and it is running

3. In journal directory create the week2.md file

4. Copy the top from week1.md and paste into week2.md and edit it to our week 2.

5. In week2.md add 

```markdown
## Working with Ruby

### Bundler

A package manager for Ruby. It is the primary way to install ruby packages, known as gems for ruby.

#### Installing Gems

You need to create a gemfile and define your gems in that file.

```Gemfile
source "https://rubygems.org"

gem 'sinatra'
gem 'rake'
gem 'pry'
gem 'puma'
gem 'activerecord'

```
Then you need to run the `bundle install` command.

This will install the gems on the system globally (unlike NodeJS that installs packages in place in a folder called node_modules)

A gemfile.lock will be created to lock down gem versions being used in this project

#### Executing Ruby Scripts in the Content of Bundler

We have to use `bundle exec` to tell future ruby scripts to use the gems we installed. This is the way we set context.

### Sinatra 

Sinatra is a micro web framework for ruby to build web-apps. 

It is great for mock or development servers or very simple projects

You can create a web-server in a single file.

[Sinatra](https://sinatrarb.com)

## TerraTowns Mock Server

### Running the Web Server

We can run the web server by executing the follow commands:

```rb
bundle install
bundle exec ruby server.rb
```

All of the code for our websever is installed in our server.rb file

```
```

6. In server.rb before the home variable add these (code might be wrong so just add comments from here)

```rb
# we will mock having a state or database for this development server
# by setting a global veriable. You would never use a global variable
# in a production server
```

7. Before class home in server.rb add

```rb
# This is a ruby class that includes validations from ActiveRecord
# This will represent our home resource as a ruby object
class Home
# ActiveModel is apart of Ruby On Rails
# It is used as an ORM it has a module within
# ActiveModel that provides validations
# The production TerraTowns server is rails and uses 
# Very similar and provided similar, or some cases, identical validation
# https://guides.rubyonrails.org/active_model_basics.html
# https://guides.rubyonrails.org/active_record_validations.html

    include ActiveModel::Validations

# Create some virtual attributes to be stored on this object
# This will set a getter and a setter
# eg.
# home = new Home()
# home.town = 'hello' # setter
# home.town () #getter
    attr_accessor :town, :name, :descriptions, :domain_name, :content_version
    validates :town, presence: true, inclusion: { in: [
        'Melmaniac Mansion',
        'cooker-cove',
        'video-valley',
        'the-nomad-pad',
        'gamers-grotto'
  ] }
    # visible to all users
    validates :name, presence: true
    # visible to all users
    validates :description, presence: true
    # we want to lock this down to only be from CloudFont
    validates :domain_name,
        format: { with: /\.cloudfront\.net\z/, message: "Domain must be from .cloudfront.met}
        # uniqueness: true,
    # content version has to be integar
    # we will make sure it is an incremental version in the controller
    validates :content_version, numerically: {only integer true}
end

# We are extending a class from Sinatra::Base to 
# turn this generic class to utilize the Sinatra web-framework
...
    def find_user_by_bearer_token
        # https://swagger.io/docs/specification/authentication/bearer-authentication/
        auth_header = request.env["HTTP_AUTHORIZATION"]
        # check if the Authorization header exists?
...
# return a hard-codedaccess token
def x_access_code
return 'numbers'
end

def x_user_uuid
return 'numbers'
end

....
    
    # Does the token match the one in our database?
    # If we can't find it than return an error if it doesn't match
    # code = access_code = token
    code = auth_header.split("Bearer ")[1]

...
    # Was there a user_uuid in the body payload json
    if param['user_uuid'].nill
...
    # the code and the user_uuid should be matching for this user
    unless code == x_accesscode && params['user_uuid'] == x_user_uuid
...
    # puts will print to the terminal similar to a print or console.log
    puts "# create - POST /api/homes"

    # a begin/resource is a try/catch, if an error occurs, result it
    begin
        # Sinatra does not automatically parse JSON bodies as params
        #like rails so we will need to manually parse it.
        payload = JSON.parse(request.body.read)
...
    # assign the payload to variables
    # to make it easier to work with the code
    name = payload["name"]
...
    # printing the variables out to console to make it easier
    # to see or debug what we have inputed into this endpoint
    puts "name #{name}"
...
    # Create a new Home model and set the attributes
    home = Home.new
...
    # ensure our validation checks pass otherwise
    # return the errors
    unless home.valid?
        # return the error message back to json
        error 442, home.errors.message.to_json
    end

    # generate out a uuid at random.
    uuid = SecureRandom.uuid
    puts "uuid#{uuid}"
    # will mock out data to our mock database
    # which is just a global variable
...
    # will just return uuid
    return { uuid: uuid }.to_json
...
    content_type: json
    # does the uuid for the home match the one in our mock database
...
    # UPDATE
    # very similar to create action
...
    # delete from our mock database
    $home = {}
# This is what will run the server
TerraTownsMockServer.run!
``` 

8. In Gitpod sinata tab do ctrl-c to end it. We will have to do this everytime.
then do

`bundle exec ruby sever.rb `

9. Go to another terminal tab and try to trigger it

`./bin/terratowns/create`

It will give us a uuid that the provider will want.

10. Go to sinatra and notice it did stuff like a create action

11. In terminal do

`./bin/terratowns/read <UUID we got from 2 commands ago when we ran the script>`

Check Sinatra terminal and notice it did a read.

12. In terminal do 
`./bin/terratowns/update <UUID we got from 2 commands ago when we ran the script>`

Doesn't work because we need domain_name and that the **code trap**.

13. In server.rb go to around line 192 to update action and fix it
In line 216 after town add 
`home.domain_name = $home[:domain_name]`

14. If we ran the script with our changes, it would give the same errror because it doesn't see a change.
You must stop the Sinatra server with ctrl+ c then do `bundle exec ruby server.rb` to bring it back up

15. Start process over again
`./bin/terratowns/create`
`./bin/terratowns/read <UUID>`
`./bin/terratowns/update <UUID>`

It still gives the same error. Put `binding pry` to help figure it out in server.rb on 222

16. Stop the server and do the whole process again. 
We should get a code break that pulls up pry and we can ask `home.domin_name` and it says it is nill.
We also will see that doing a `payload` (because it comes from there in line 208)
We are not supposed to pass a domain name here, take out 208.

17. Take out 219 for domain name since we just put another earlier and also take out `binding pry`

18. Start server over again and do the process again. 
We see update in sinatra terminal now

19. Do a `./bin/terratowns/delete <UUID>`

20. It kind of messed it up so go back to server.rb and add 240
```rb
uid = $home[:uuid]
$home = {}
{ uuid: uuid}.to_json
```
21. Stop and restart sinatra. Then do /delete than stop server.

22. Commit with 
> #42 make sure that all our endpoints work correctly.

### Issues, PR, tag, and stop workspace

## "Setup Skeleton For Custom Terraform Provider" video
